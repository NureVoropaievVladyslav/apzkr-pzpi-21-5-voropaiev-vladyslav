// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240503215121_CreatePonds")]
    partial class CreatePonds
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.FeedingSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FeedingFrequencyInHours")
                        .HasColumnType("integer");

                    b.Property<double>("FoodAmount")
                        .HasColumnType("double precision");

                    b.Property<Guid>("PondId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PondId")
                        .IsUnique();

                    b.ToTable("FeedingSchedule");
                });

            modelBuilder.Entity("Domain.Entities.Pond", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FeedingScheduleId")
                        .HasColumnType("uuid");

                    b.Property<int>("FishPopulation")
                        .HasColumnType("integer");

                    b.Property<int>("FishSpecies")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Pond");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PondId")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PondId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.FeedingSchedule", b =>
                {
                    b.HasOne("Domain.Entities.Pond", "Pond")
                        .WithOne("FeedingSchedule")
                        .HasForeignKey("Domain.Entities.FeedingSchedule", "PondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pond");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Pond", "WorkArea")
                        .WithMany("Personnel")
                        .HasForeignKey("PondId");

                    b.Navigation("WorkArea");
                });

            modelBuilder.Entity("Domain.Entities.Pond", b =>
                {
                    b.Navigation("FeedingSchedule");

                    b.Navigation("Personnel");
                });
#pragma warning restore 612, 618
        }
    }
}
